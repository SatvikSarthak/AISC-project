
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
       
        "# Generate synthetic dataset\n",
        "def generate_data():\n",
        "    np.random.seed(1)\n",
        "    X = np.random.randn(200, 2)  # 200 samples, 2 features\n",
        "    y = np.array([1 if x[0] + x[1] > 0 else 0 for x in X])  # Linearly separable data\n",
        "    return X, y\n",
        "\n",

        "# Perceptron model\n",
        "class Perceptron:\n",
        "    def __init__(self, learning_rate=0.01, epochs=100):\n",
        "        self.learning_rate = learning_rate\n",
        "        self.epochs = epochs\n",
        "        self.weights = None\n",
        "        self.bias = None\n",
        "\n",
        "    def train(self, X, y):\n",
        "        samples, features = X.shape\n",
        "        self.weights = np.zeros(features)\n",
        "        self.bias = 0\n",
        "\n",
        "        for _ in range(self.epochs):\n",
        "            for idx, x_i in enumerate(X):\n",
        "                linear_output = np.dot(x_i, self.weights) + self.bias\n",
        "                y_pred = 1 if linear_output > 0 else 0\n",
        "\n",
        "                # Update rule\n",
        "                update = self.learning_rate * (y[idx] - y_pred)\n",
        "                self.weights += update * x_i\n",
        "                self.bias += update\n",
        "\n",
        "    def predict(self, X):\n",
        "        linear_output = np.dot(X, self.weights) + self.bias\n",
        "        return np.where(linear_output > 0, 1, 0)\n",
        "\n",

        
        "X, y = generate_data()\n",
        "perceptron = Perceptron(learning_rate=0.1, epochs=10)\n",
        "perceptron.train(X, y)\n",
        "\n",
        "# Predictions\n",
        "y_pred = perceptron.predict(X)\n",
        "\n",

        "# Visualize the results\n",
        "plt.scatter(X[:, 0], X[:, 1], c=y, cmap='bwr', alpha=0.7, edgecolors='k')\n",
        "x_vals = np.linspace(min(X[:, 0]), max(X[:, 0]), 100)\n",
        "y_vals = -(perceptron.weights[0] * x_vals + perceptron.bias) / perceptron.weights[1]\n",
        "plt.plot(x_vals, y_vals, color=\"black\", linestyle=\"--\")\n",
        "plt.title(\"Perceptron Classification\")\n",
        "plt.xlabel(\"Feature 1\")\n",
        "plt.ylabel(\"Feature 2\")\n",
        "plt.show()\n"
      ]
    }
  ]
}
